using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DamWebAPI.View.AppManage
{
    /// <summary>
    /// AppData.xaml 的交互逻辑
    /// </summary>
    public partial class AppDataView : UserControl
    {
        public AppDataView()
        {
            InitializeComponent();
        }


        private void Button_Click(object sender, RoutedEventArgs e)
        {
            gridControl.CopyToClipboard();
        }

        private void appNameTxt_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key.Equals(Key.Enter))
            {

                // execute the command, if it exists
                ICommand cmd = btnNameSearch.Command;

                (sender as TextBox).GetBindingExpression(TextBox.TextProperty).UpdateSource();

                if (cmd != null) cmd.Execute(null);
            }
        }



        private void gridControl_CustomColumnDisplayText(object sender, CustomColumnDisplayTextEventArgs e)
        {


            if (e.Value is double || e.Value is DateTimeOffset)
            {
                GridControl dg = sender as GridControl;

                if (e.Column.FieldType == typeof(DateTimeOffset))
                {

                    e.DisplayText = ((( DateTimeOffset)e.Value).DateTime).ToString("yyyy-MM-dd HH:mm:ss");
                }
                else if (e.Column.FieldType == typeof(double))
                {
                    e.DisplayText = ((double)e.Value).ToString("f" + getDotNum(e.Column.FieldName));
                    //  col.EditSettings.DisplayFormat = "{0:yyyy-MM-dd HH:mm:ss}";
                }
            }

        }

        private byte getDotNum(string pName)
        {
            if (this.DataContext != null)
            {
                DamWebAPI.ViewModel.AppManage.AppDataViewModel context = this.DataContext as DamWebAPI.ViewModel.AppManage.AppDataViewModel;

                var dic = context.DotNumDic;
                byte pre = 2;
                dic.TryGetValue(pName, out pre);
                if (pre < 0)
                {
                    return 2;
                }
                else
                {
                    return pre;
                }
            }
            else
            {
                return 2;
            }
        }

        private void gridControl_AutoGeneratedColumns(object sender, RoutedEventArgs e)
        {
            GridControl dg = sender as GridControl;

            var col = dg.Columns.First(s => s.FieldType == typeof(DateTimeOffset));
            col.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            col.AllowEditing = DevExpress.Utils.DefaultBoolean.False;

        }

        private void TableView_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            TableView tv = sender as TableView;
            DataRow row = (e.Row as DataRowView).Row;
            string feildName = e.Column.FieldName;
            DamWebAPI.ViewModel.AppManage.AppDataViewModel context = this.DataContext as DamWebAPI.ViewModel.AppManage.AppDataViewModel;

            context.HandleDataRowChanged(row, feildName);
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            gridControl.View.AllowEditing = true;
        }

      
    }
}
